{"version":3,"sources":["api.js","Checkpoints.js","Exposures.js","StatusAlert.js","i18n.js","App.js","index.js","themes/light.js","themes/dark.js","../../trackcovid-js/config.js","languages.js","../../trackcovid-js/index.js","translations/en.js"],"names":["serverBaseUrl","defaultServerBaseUrl","trackCovid","TrackCovid","safetyPeriod","estimatedDiagnosisDelay","getCheckpoints","checkpointsString","window","localStorage","getItem","Promise","resolve","JSON","parse","setCheckpoints","checkpointsArr","setItem","stringify","exposureWindow","checkpointKeyLength","hostCheckpoint","joinCheckpoint","getExposureStatus","exportCheckpoints","initialState","mode","checkpointKey","checkpointTime","legacyMode","Checkpoints","state","URLSearchParams","location","search","get","length","API","then","checkpointObj","setState","history","replaceState","pathname","e","console","error","this","key","timestamp","alert","reset","data","urlSplit","split","refs","checkpointQR","openImageDialog","content","qrValue","href","Grid","container","direction","justify","alignItems","Typography","style","marginTop","marginBottom","Translation","t","Button","onClick","becomeHost","bind","variant","color","aria-label","value","size","backgroundColor","padding","endHost","Date","toString","ref","delay","onError","handleScanError","onScan","handleScan","width","facingMode","React","Component","exposureStatus","loaded","Exposures","confirmcode","confirmcodeLength","reportConfirmation","checkpoints","dataStr","encodeURIComponent","dlAnchorElem","document","getElementById","setAttribute","click","props","status","statusLoaded","theme","statusMessageLoading","statusMessageNegative","statusMessagePositive","riskLevelLoading","riskLevelNegative","riskLevelPositive","statusMessage","riskLevel","riskLevelColor","palette","main","downloadHistory","id","display","withTheme","StatusAlert","extraText","onExposuresTab","Alert","severity","resources","en","i18n","use","LanguageDetector","initReactI18next","init","fallbackLng","keySeparator","interpolation","escapeValue","detection","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","documentElement","checkWhitelist","ListItemLink","ListItem","button","component","App","currentTab","isDrawerOpen","currentLanguage","language","checkConfirmcode","updateStatus","a","setInterval","event","newVal","changeLanguage","target","CurrentPage","CheckpointsPage","ExposuresPage","AppBar","position","Container","maxWidth","flexGrow","Toolbar","IconButton","edge","openDrawer","process","fallback","supportedLanguages","textAlign","FormControl","Select","labelId","onChange","onSelectLanguage","map","MenuItem","name","BottomNavigation","bottom","onChangeTab","showLabels","BottomNavigationAction","label","icon","SwipeableDrawer","open","onClose","closeDrawer","List","ListItemIcon","ListItemText","primary","createMuiTheme","type","secondary","ReactDOM","render","ThemeProvider","CssBaseline","querySelector","module","exports","sha256","require","config","serverRequest","method","url","body","fetch","headers","Accept","undefined","response","responseJSON","json","Error","addCheckpoint","now","push","newCheckpointKey","String","Math","random","substring","visitedCheckpoints","recentCheckpoints","filter","checkpoint","exposedCheckpoints","matches","visited","exposed"],"mappings":"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","file":"static/js/main.312ce63d.chunk.js","sourcesContent":["import TrackCovid from 'trackcovid-js'\nimport {\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  exposureWindow,\n  checkpointKeyLength,\n  serverBaseUrl as defaultServerBaseUrl\n} from 'trackcovid-js/config'\n\nconst checkpointsDBKey = 'CHECKPOINTS'\nconst serverBaseUrl = defaultServerBaseUrl\n\nfunction getCheckpoints () {\n  const localStorage = window.localStorage\n  const checkpointsString = localStorage.getItem(checkpointsDBKey) || '[]'\n  return Promise.resolve(JSON.parse(checkpointsString))\n}\n\nfunction setCheckpoints (checkpointsArr) {\n  const localStorage = window.localStorage\n  return Promise.resolve(localStorage.setItem(checkpointsDBKey, JSON.stringify(checkpointsArr)))\n}\n\nconst trackCovid = TrackCovid({\n  serverBaseUrl,\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  getCheckpoints,\n  setCheckpoints,\n  exposureWindow,\n  checkpointKeyLength\n})\n\nconst {\n  hostCheckpoint,\n  joinCheckpoint,\n  getExposureStatus,\n  exportCheckpoints\n} = trackCovid\n\nexport default {\n  hostCheckpoint,\n  joinCheckpoint,\n  getExposureStatus,\n  exportCheckpoints\n}\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport AddIcon from '@material-ui/icons/Add'\nimport HomeIcon from '@material-ui/icons/Home'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport StopIcon from '@material-ui/icons/Stop'\nimport QRCode from 'qrcode.react'\nimport QRReader from 'react-qr-reader'\nimport { Translation } from 'react-i18next'\nimport API from './api'\nimport {\n  checkpointKeyLength\n} from 'trackcovid-js/config'\n\nconst initialState = {\n  mode: 'home',\n  checkpointKey: null,\n  checkpointTime: null,\n  legacyMode: false\n}\n\nclass Checkpoints extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const checkpointKey = urlParams.get('checkpoint')\n    if (checkpointKey) {\n      if (checkpointKey.length === checkpointKeyLength) {\n        try {\n          API.joinCheckpoint(checkpointKey).then(checkpointObj => {\n            this.setState({ mode: 'scan-success' })\n            window.history.replaceState(null, null, window.location.pathname)\n          })\n        } catch (e) {\n          console.error(e)\n          this.setState({ mode: 'scan-error' })\n          window.history.replaceState(null, null, window.location.pathname)\n        }\n      } else {\n        this.setState({ mode: 'scan-error' })\n        window.history.replaceState(null, null, window.location.pathname)\n      }\n    }\n  }\n\n  async reset () {\n    this.setState(initialState)\n  }\n\n  async becomeHost () {\n    try {\n      const { key, timestamp } = await API.hostCheckpoint()\n      this.setState({\n        mode: 'host',\n        checkpointKey: key,\n        checkpointTime: timestamp\n      })\n    } catch (e) {\n      console.error(e)\n      window.alert('There was an unexpected error. Please leave feedback so the developer can fix this.')\n    }\n  }\n\n  async endHost () {\n    // TODO confirmation\n    this.reset()\n  }\n\n  async joinCheckpoint () {\n    this.setState({\n      mode: 'join'\n    })\n  }\n\n  async handleScan (data) {\n    if (data) {\n      if (data.length === checkpointKeyLength) {\n        try {\n          await API.joinCheckpoint(data)\n          this.setState({ mode: 'scan-success' })\n        } catch (e) {\n          console.error(e)\n          this.setState({ mode: 'scan-error' })\n        }\n      } else {\n        // QR code may be a url\n        const urlSplit = data.split('?checkpoint=')\n        if ((urlSplit.length === 2) && (urlSplit[1].length === checkpointKeyLength)) {\n          await API.joinCheckpoint(urlSplit[1])\n          this.setState({ mode: 'scan-success' })\n        } else {\n          this.setState({ mode: 'scan-error' })\n        }\n      }\n    }\n  }\n\n  handleScanError () {\n    this.setState({ legacyMode: true })\n  }\n\n  openImageDialog () {\n    this.refs.checkpointQR.openImageDialog()\n  }\n\n  render () {\n    const { mode, checkpointKey, checkpointTime, legacyMode } = this.state\n    const qrValue = `${window.location.href}?checkpoint=${checkpointKey}`\n    let content\n    if (mode === 'home') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('welcomeMessage')}</Translation>\n          </Typography>\n          <Button onClick={this.becomeHost.bind(this)} variant='contained' color='secondary' aria-label='add' style={{ marginTop: 50 }}>\n            <HomeIcon />\n            <Translation>{t => t('hostCheckpointButton')}</Translation>\n          </Button>\n          <Button onClick={this.joinCheckpoint.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 50 }}>\n            <AddIcon />\n            <Translation>{t => t('joinCheckpointButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'host') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('hostingCheckpointMessage')}</Translation>\n          </Typography>\n          <QRCode value={qrValue} size={200} style={{ backgroundColor: '#fff', padding: 20 }} />\n          <Button onClick={this.endHost.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <StopIcon />\n            <Translation>{t => t('endCheckpointButton')}</Translation>\n          </Button>\n          <Typography style={{ marginTop: 25 }}>\n            <Translation>{t => t('checkpointCreatedMessage')}</Translation> {new Date(checkpointTime).toString()}\n          </Typography>\n        </Grid>\n      )\n    } else if (mode === 'join') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <QRReader\n            ref='checkpointQR'\n            delay={300}\n            onError={this.handleScanError.bind(this)}\n            onScan={this.handleScan.bind(this)}\n            style={{ width: legacyMode ? 0 : '100%' }}\n            facingMode='environment'\n            legacyMode={legacyMode}\n          />\n          { legacyMode && (\n            <Typography style={{ marginTop: 25 }}>\n              <Translation>{t => t('noCameraPermissionMessage')}</Translation>\n            </Typography>\n          ) }\n          <Button onClick={this.openImageDialog.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <Translation>{t => t('takePictureButton')}</Translation>\n          </Button>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'scan-success') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('joinSuccessfulMessage')}</Translation>\n          </Typography>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'scan-error') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('scanErrorMessage')}</Translation>\n          </Typography>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    }\n    return content\n  }\n}\n\nexport default Checkpoints\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport GetAppIcon from '@material-ui/icons/GetApp'\nimport { withTheme } from '@material-ui/core/styles'\nimport { Translation } from 'react-i18next'\nimport API from './api'\nimport {\n  confirmcodeLength\n} from 'trackcovid-js/config'\n\nconst initialState = {\n  exposureStatus: false,\n  loaded: false,\n  mode: 'default'\n}\n\nclass Exposures extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const confirmcode = urlParams.get('confirm')\n    if (confirmcode) {\n      if (confirmcode.length === confirmcodeLength) {\n        this.setState({ confirmcode })\n        window.history.replaceState(null, null, window.location.pathname)\n        this.reportConfirmation()\n      } else {\n        this.setState({ mode: 'scan-error' })\n        window.history.replaceState(null, null, window.location.pathname)\n      }\n    }\n  }\n\n  async reset () {\n    this.setState(initialState)\n  }\n\n  async downloadHistory () {\n    const checkpoints = await API.exportCheckpoints()\n    var dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(checkpoints))\n    var dlAnchorElem = document.getElementById('downloadAnchorElem')\n    dlAnchorElem.setAttribute('href', dataStr)\n    dlAnchorElem.setAttribute('download', 'checkpoints.json')\n    dlAnchorElem.click()\n  }\n\n  async handleScan (data) {\n    if (data) {\n      if (data.length === confirmcodeLength) {\n        this.setState({ confirmcode: data })\n        this.reportConfirmation()\n      } else {\n        // QR code may be a url\n        const urlSplit = data.split('?confirm=')\n        if ((urlSplit.length === 2) && (urlSplit[1].length === confirmcodeLength)) {\n          this.setState({ confirmcode: urlSplit[1] })\n          this.reportConfirmation()\n        } else {\n          this.setState({ mode: 'scan-error' })\n        }\n      }\n    }\n  }\n\n  render () {\n    const { status, statusLoaded, theme } = this.props\n    const { mode } = this.state\n    const statusMessageLoading = (<Translation>{t => t('statusLoadingMessage')}</Translation>)\n    const statusMessageNegative = (<Translation>{t => t('statusNegativeMessage')}</Translation>)\n    const statusMessagePositive = (<Translation>{t => t('statusPositiveMessage')}</Translation>)\n    const riskLevelLoading = (<Translation>{t => t('statusLoadingMessage')}</Translation>)\n    const riskLevelNegative = (<Translation>{t => t('standardRiskLevelMessage')}</Translation>)\n    const riskLevelPositive = (<Translation>{t => t('elevatedRiskLevelMessage')}</Translation>)\n    const statusMessage = statusLoaded\n      ? (status\n        ? statusMessagePositive\n        : statusMessageNegative)\n      : statusMessageLoading\n    const riskLevel = statusLoaded\n      ? (status\n        ? riskLevelPositive\n        : riskLevelNegative)\n      : riskLevelLoading\n    const riskLevelColor = status\n      ? 'error'\n      : 'primary'\n    return (\n      <Grid\n        container\n      >\n        {\n          ((mode === 'default') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25 }}>\n                <Translation>{t => t('yourRiskLevelMessage')}</Translation>: <span style={{ color: theme.palette[riskLevelColor].main }}>{riskLevel}</span>\n              </Typography>\n              <Typography style={{ marginTop: 15 }}>\n                {statusMessage}\n              </Typography>\n              <Typography style={{ marginTop: 25 }}>\n                <Translation>{t => t('aboutReportMessage')}</Translation>\n              </Typography>\n              <Button onClick={this.downloadHistory.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <GetAppIcon />\n                <Translation>{t => t('downloadHistoryButton')}</Translation>\n              </Button>\n              <a id='downloadAnchorElem' href='/' style={{ display: 'none' }}><Translation>{t => t('downloadHistoryButton')}</Translation></a>\n            </Grid>\n          ))\n        }\n      </Grid>\n    )\n  }\n}\n\nexport default withTheme(Exposures)\n","import React from 'react'\nimport Alert from '@material-ui/lab/Alert'\nimport { Translation } from 'react-i18next'\n\nclass StatusAlert extends React.Component {\n  render () {\n    const { status, onExposuresTab } = this.props\n    const extraText = onExposuresTab ? '' : (<Translation>{t => ' ' + t('seeStatusTabMessage')}</Translation>)\n    if (status) {\n      return (\n        <Alert style={{ marginTop: 25, width: '100%' }} severity='error'><Translation>{t => t('elevatedRiskAlertMessage')}</Translation>{extraText}</Alert>\n      )\n    } else {\n      return <div />\n    }\n  }\n}\n\nexport default StatusAlert\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport en from './translations/en'\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  en\n}\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    fallbackLng: 'fr',\n    keySeparator: false, // we do not use keys in form messages.welcome\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    },\n    detection: {\n      order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag', 'path', 'subdomain'],\n\n      // keys or params to lookup language from\n      lookupQuerystring: 'lng',\n      lookupCookie: 'i18next',\n      lookupLocalStorage: 'i18nextLng',\n      lookupFromPathIndex: 0,\n      lookupFromSubdomainIndex: 0,\n\n      // cache user language on\n      caches: ['localStorage', 'cookie'],\n      excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\n\n      // optional expire and domain for set cookie\n      cookieMinutes: 10,\n      cookieDomain: 'myDomain',\n\n      // optional htmlTag with lang attribute, the default is:\n      htmlTag: document.documentElement,\n\n      // only detect languages that are in the whitelist\n      checkWhitelist: true\n    }\n  })\n\nexport default i18n\n","import React, { Suspense } from 'react'\nimport Container from '@material-ui/core/Container'\nimport IconButton from '@material-ui/core/IconButton'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport CropFree from '@material-ui/icons/CropFree'\nimport Face from '@material-ui/icons/Face'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport InfoIcon from '@material-ui/icons/Info'\nimport RoomIcon from '@material-ui/icons/Room'\nimport PersonIcon from '@material-ui/icons/Person'\nimport AppBar from '@material-ui/core/AppBar'\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport CheckpointsPage from './Checkpoints'\nimport ExposuresPage from './Exposures'\nimport StatusAlert from './StatusAlert'\nimport API from './api'\nimport { Translation } from 'react-i18next'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport i18n from './i18n'\nimport supportedLanguages from './languages'\n\nconst oneSecond = 1000\nconst pollingTime = 30 * oneSecond\n\nfunction ListItemLink (props) {\n  return <ListItem button component='a' {...props} />\n}\n\nclass App extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      currentTab: 'checkpoints',\n      status: false,\n      statusLoaded: false,\n      isDrawerOpen: false,\n      currentLanguage: i18n.language\n    }\n  }\n\n  componentDidMount () {\n    this.checkConfirmcode()\n    const updateStatus = async () => {\n      try {\n        const exposureStatus = await API.getExposureStatus()\n        this.setState({ status: exposureStatus, statusLoaded: true })\n      } catch (e) {\n        console.error(e)\n        this.setState({ status: false, statusLoaded: false })\n      }\n    }\n    updateStatus()\n    setInterval(updateStatus, pollingTime)\n  }\n\n  checkConfirmcode () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const confirmcode = urlParams.get('confirm')\n    if (confirmcode) {\n      this.setState({ currentTab: 'status' })\n    }\n  }\n\n  onChangeTab (event, newVal) {\n    this.setState({ currentTab: newVal })\n  }\n\n  openDrawer () {\n    this.setState({ isDrawerOpen: true })\n  }\n\n  closeDrawer () {\n    this.setState({ isDrawerOpen: false })\n  }\n\n  onSelectLanguage (event) {\n    i18n.changeLanguage(event.target.value)\n    this.setState({ currentLanguage: event.target.value })\n  }\n\n  render () {\n    const { currentTab, status, statusLoaded, isDrawerOpen, currentLanguage } = this.state\n    const CurrentPage = (currentTab === 'checkpoints')\n      ? CheckpointsPage\n      : ExposuresPage\n    return (\n      <div>\n        <AppBar position='static' color='secondary'>\n          <Container maxWidth='sm' style={{ flexGrow: 1 }}>\n            <Toolbar>\n              <IconButton\n                edge='start'\n                color='inherit'\n                aria-label='open drawer'\n                onClick={this.openDrawer.bind(this)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant='h6' component='h1' style={{ flexGrow: 1 }}>\n                {process.env.REACT_APP_NAME}\n              </Typography>\n            </Toolbar>\n          </Container>\n        </AppBar>\n        <Container maxWidth='sm' style={{ marginBottom: 76 }}>\n          <Suspense fallback='loading'>\n            <StatusAlert status={status} onExposuresTab={currentTab === 'status'} />\n            <CurrentPage status={status} statusLoaded={statusLoaded} />\n            {supportedLanguages.length > 1 && (\n              <Container style={{ textAlign: 'center' }}>\n                <div>\n                  <FormControl style={{ marginTop: '20px' }}>\n                    <Select\n                      labelId='language-select-label'\n                      id='language-select'\n                      value={currentLanguage}\n                      onChange={this.onSelectLanguage.bind(this)}\n                    >\n                      { supportedLanguages.map(language => {\n                        return (\n                          <MenuItem value={language.id}>{language.name}</MenuItem>\n                        )\n                      }) }\n                    </Select>\n                  </FormControl>\n                </div>\n              </Container>\n            )}\n          </Suspense>\n        </Container>\n        <BottomNavigation\n          value={currentTab}\n          style={{\n            width: '100%',\n            position: 'fixed',\n            bottom: 0\n          }}\n          onChange={this.onChangeTab.bind(this)}\n          showLabels\n        >\n          <BottomNavigationAction label={<Translation>{t => t('checkpointsTab')}</Translation>} value='checkpoints' icon={<CropFree />} />\n          <BottomNavigationAction label=<Translation>{t => t('statusTab')}</Translation> value='status' icon={<Face />} />\n        </BottomNavigation>\n        <SwipeableDrawer\n          open={isDrawerOpen}\n          onClose={this.closeDrawer.bind(this)}\n        >\n          <List component='nav' aria-label='settings'>\n            <ListItemLink style={{ width: 250 }} href='https://trackcovid.net' target='_blank'>\n              <ListItemIcon>\n                <InfoIcon />\n              </ListItemIcon>\n              <ListItemText primary=<Translation>{t => t('menuAboutButton')}</Translation> />\n            </ListItemLink>\n            <ListItemLink style={{ width: 250 }} href='/checkpoint' target='_blank'>\n              <ListItemIcon>\n                <RoomIcon />\n              </ListItemIcon>\n              <ListItemText primary=<Translation>{t => t('menuCheckpointButton')}</Translation> />\n            </ListItemLink>\n            <ListItemLink style={{ width: 250 }} href='/admin' target='_blank'>\n              <ListItemIcon>\n                <PersonIcon />\n              </ListItemIcon>\n              <ListItemText primary=<Translation>{t => t('menuAdminButton')}</Translation> />\n            </ListItemLink>\n          </List>\n        </SwipeableDrawer>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport App from './App'\nimport lightTheme from './themes/light'\nimport darkTheme from './themes/dark'\nimport './i18n'\n\nconst theme = process.env.REACT_APP_THEME === 'dark'\n  ? darkTheme\n  : lightTheme\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root')\n)\n","import { createMuiTheme } from '@material-ui/core/styles'\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#2979ff'\n    },\n    secondary: {\n      main: '#3f51b5'\n    }\n  }\n})\n\nexport default theme\n","import { createMuiTheme } from '@material-ui/core/styles'\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#82b1ff'\n    },\n    secondary: {\n      main: '#3f51b5'\n    }\n  }\n})\n\nexport default theme\n","const oneDay = 1000 * 60 * 60 * 24\nconst safetyPeriod = 14 * oneDay\nconst estimatedDiagnosisDelay = 2 * oneDay\nconst serverBaseUrl = '/api/checkpoints'\nconst checkpointKeyLength = 16\nconst exposureWindow = oneDay\n\nmodule.exports = {\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  serverBaseUrl,\n  checkpointKeyLength,\n  exposureWindow\n}\n","module.exports = [\n  { id: 'en', name: 'English' }\n]\n","/* globals fetch */\nconst sha256 = require('js-sha256').sha256\n\nfunction TrackCovid (config) {\n  const {\n    serverBaseUrl,\n    safetyPeriod,\n    estimatedDiagnosisDelay,\n    getCheckpoints,\n    setCheckpoints,\n    exposureWindow,\n    checkpointKeyLength\n  } = config\n\n  const oneHour = 1000 * 60 * 60\n\n  async function serverRequest (method, url = '', body) {\n    const response = await fetch(`${serverBaseUrl}/${url}`, {\n      method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: body ? JSON.stringify(body) : undefined\n    })\n    const responseJSON = response.json()\n    if (responseJSON.error) {\n      throw new Error(`request-failed: ${serverBaseUrl}/${url}`)\n    }\n    return responseJSON\n  }\n\n  async function addCheckpoint (checkpointKey) {\n    const checkpoints = await getCheckpoints()\n    const checkpointObj = {\n      key: checkpointKey,\n      timestamp: Date.now()\n    }\n    checkpoints.push(checkpointObj)\n    await setCheckpoints(checkpoints)\n    return checkpointObj\n  }\n\n  async function hostCheckpoint () {\n    const newCheckpointKey = sha256(String(Math.random())).substring(0, checkpointKeyLength)\n    return addCheckpoint(newCheckpointKey)\n  }\n\n  function joinCheckpoint (checkpointKey) {\n    return addCheckpoint(checkpointKey)\n  }\n\n  async function exportCheckpoints () {\n    const visitedCheckpoints = await getCheckpoints()\n    const recentCheckpoints = visitedCheckpoints.filter(checkpoint => {\n      return (Date.now() - checkpoint.timestamp) <= estimatedDiagnosisDelay\n    })\n    return recentCheckpoints\n  }\n\n  async function getExposureStatus () {\n    const visitedCheckpoints = await getCheckpoints()\n    const recentCheckpoints = visitedCheckpoints.filter(checkpoint => {\n      return Date.now() - checkpoint.timestamp <= safetyPeriod\n    })\n    const response = await serverRequest('GET')\n    const exposedCheckpoints = response.error ? [] : response.checkpoints\n    const matches = recentCheckpoints.filter(visited => {\n      return exposedCheckpoints.filter(exposed => {\n        return (\n          (visited.key === exposed.key) &&\n          (visited.timestamp >= (exposed.timestamp - oneHour)) &&\n          (visited.timestamp - exposed.timestamp <= exposureWindow)\n        )\n      }).length > 0\n    })\n    return matches.length > 0\n  }\n\n  return {\n    hostCheckpoint,\n    joinCheckpoint,\n    getExposureStatus,\n    exportCheckpoints\n  }\n}\n\nmodule.exports = TrackCovid\n","const appName = process.env.REACT_APP_NAME\n\nmodule.exports = {\n  'translation': {\n    'menuAboutButton': 'About',\n    'menuCheckpointButton': 'Checkpoint',\n    'menuAdminButton': 'Admin',\n    'checkpointsTab': 'Checkpoints',\n    'statusTab': 'Status',\n    'settingsTab': 'Settings',\n    'welcomeMessage': `Welcome to ${appName}. To participate in the effort to track the spread of the SARS-COV-2 virus, please host or join a checkpoint whenever you interact with others in a way that could transmit the virus.`,\n    'hostCheckpointButton': 'Host a Checkpoint',\n    'joinCheckpointButton': 'Join a Checkpoint',\n    'hostingCheckpointMessage': 'You are now hosting a checkpoint. Others may join using the QR code below.',\n    'endCheckpointButton': 'End checkpoint',\n    'printCheckpointButton': 'Print',\n    'checkpointCreatedMessage': 'Checkpoint created',\n    'noCameraPermissionMessage': \"This app does not have permission to access your device's camera. Instead, you may take a picture of the QR code.\",\n    'takePictureButton': 'Take a picture',\n    'backButton': 'Back',\n    'joinSuccessfulMessage': 'You have joined the checkpoint successfully.',\n    'scanErrorMessage': 'The QR code could not be read. Please try again.',\n    'statusLoadingMessage': 'Loading your status...',\n    'statusNegativeMessage': 'No transmission paths from infected individuals to you have been discovered at this time. However, everyone is at risk and individuals should follow the directives of the CDC as well as local, state, and federal governments.',\n    'statusPositiveMessage': 'A possible transmission path from an infected individual to you has been discovered. You should take precautionary measures to protect yourself and others, according to the directives of the CDC  as well as local, state, and federal governments.',\n    'loadingMessage': 'Loading...',\n    'standardRiskLevelMessage': 'standard',\n    'elevatedRiskLevelMessage': 'elevated',\n    'yourRiskLevelMessage': 'Your risk level',\n    'aboutReportMessage': 'If you have received a positive test, you may download your recent checkpoints below and share this file with your doctor. This will warn those who may have been exposed of their increased risk. You will remain anonymous.',\n    'reportButton': 'Anonymous Report',\n    'downloadHistoryButton': 'Download checkpoints',\n    'aboutConfirmationCodeMessage': 'Do you have a confirmation code to scan? Scanning a confirmation code will help those that may have been exposed, by letting them know that this is a legitimate risk.',\n    'scanConfirmationCodeButton': 'Scan confirmation code',\n    'scanWithoutConfirmationCodeButton': \"I don't have a code\",\n    'reportConfirmationMessage': 'This will notify those that may have been exposed of their increased risk. You will remain anonymous. This cannot be undone.',\n    'reportCompletedMessage': 'Your positive status was reported anonymously. Those at risk will be notified. Thank you.',\n    'cancelReportButton': 'Never mind',\n    'confirmReportButton': 'Report now',\n    'aboutUseConfirmedDiagnoses': 'Selecting \"Use only confirmed diagnoses\" will ignore possible transmission paths from unconfirmed reports.',\n    'useConfirmedDiagnosesButton': 'Use only confirmed diagnoses',\n    'elevatedRiskAlertMessage': 'Your risk level is elevated.',\n    'seeStatusTabMessage': 'See the status tab.'\n  }\n}\n"],"sourceRoot":""}